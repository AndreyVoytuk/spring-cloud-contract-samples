import org.springframework.cloud.contract.verifier.config.TestFramework

ext['junit-jupiter.version'] = '5.5.1'
ext {
	mockitoExtensionVersion = '1.1.1'
}

buildscript {
	repositories {
		mavenCentral()
		mavenLocal()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
		maven { url "https://repo.spring.io/release" }
	}

	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${findProperty('bootVersion') ?: bootVersion}"
		//remove::start[]
		classpath "org.springframework.cloud:spring-cloud-contract-gradle-plugin:${findProperty('verifierVersion') ?: verifierVersion}"
		// tag::test_dep_in_plugin[]
		classpath "com.example:beer-common:0.0.1.BUILD-SNAPSHOT"
		// end::test_dep_in_plugin[]
		// remove::end[]
	}
}

println "Boot Version [${findProperty('bootVersion') ?: bootVersion}], Cloud version [${findProperty('BOM_VERSION') ?: BOM_VERSION}], Contract version [${findProperty('verifierVersion') ?: verifierVersion}]"

group = 'com.example'
version = '0.0.1.BUILD-SNAPSHOT'

repositories {
	mavenCentral()
	mavenLocal()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
	maven { url "https://repo.spring.io/release" }
}

apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
//remove::start[]
apply plugin: 'spring-cloud-contract'
// remove::end[]
apply plugin: 'maven-publish'

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${project.findProperty('BOM_VERSION') ?: BOM_VERSION}"
	}
}

sourceCompatibility = org.gradle.api.JavaVersion.VERSION_1_8

dependencies {
	compile("org.springframework.boot:spring-boot-starter-web")
	compile("org.springframework.boot:spring-boot-starter-actuator")
	compile("org.springframework.cloud:spring-cloud-starter-stream-rabbit"){
		exclude group: 'junit', module: 'junit'
	}
	testCompile("org.springframework.cloud:spring-cloud-stream-test-support"){
		exclude group: 'junit', module: 'junit'
	}
	//remove::start[]
	// tag::verifier_dep[]
	testCompile("org.springframework.cloud:spring-cloud-starter-contract-verifier"){
		exclude group: 'junit', module: 'junit'
	}
	// end::verifier_dep[]
	// tag::test_dep[]
	testCompile("com.example:beer-common:0.0.1.BUILD-SNAPSHOT")
	// end::test_dep[]
	testCompile group: 'name.falgout.jeffrey.testing.junit5', name: 'mockito-extension', version: "$mockitoExtensionVersion"
	testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api'
	testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine'
	testRuntime group: 'org.junit.platform', name: 'junit-platform-launcher'
	// remove::end[]
}

//remove::start[]
contracts {
	targetFramework = TestFramework.JUNIT5
	packageWithBaseClasses = 'com.example'
	baseClassMappings {
		baseClassMapping(".*intoxication.*", "com.example.intoxication.BeerIntoxicationBase")
	}
}
// remove::end[]

test {
	useJUnitPlatform()
	testLogging {
		exceptionFormat = 'full'
	}
	afterSuite { desc, result ->
		if (!desc.parent) {
			println "Results: (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
			boolean skipTests = Boolean.parseBoolean(project.findProperty('SKIP_TESTS') ?: "false")
			if (result.testCount == 0 && !skipTests) {
				throw new IllegalStateException("No tests were found. Failing the build")
			}
		}
	}
}